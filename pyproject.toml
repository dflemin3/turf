[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "turf"
version = "0.9.2"
dynamic = ["readme"]
authors = [{name = "David P. Fleming", email = "dpfleming91@gmail.com"}]
maintainers = [{name = "David P. Fleming", email = "dpfleming91@gmail.com"}]
description = "NFL and NHL Hierarchical Monte Carlo inference and game simulation"
license = {file = "LICENSE"}
requires-python = ">=3.10"
classifiers = ['Development Status :: 4 - Beta',
               'Programming Language :: Python :: 3.10',
               'Programming Language :: Python :: 3.11',
               'Programming Language :: Python :: 3.12',
               'License :: OSI Approved :: MIT License',
               'Operating System :: OS Independent']
dependencies = ['numpy',
                'pandas',
                'pymc>5',
                'arviz',
                'mechanicalsoup',
                'beautifulsoup4',
                'lxml',]
keywords = ['hierarchical', 'bayesian', 'football', 'hockey', 'inference', 'monte carlo', 'simulation']

[project.optional-dependencies]
opp = ['matplotlib',
       'seaborn',
       'pytest',
       'coverage',
       'ruff']

[project.urls]
Homepage = 'https://github.com/dflemin3/turf'
Issues = 'https://github.com/dflemin3/turf/issues'
Documentation = "https://github.com/dflemin3/turf/blob/main/docs/whitepaper.md"
Repository = "https://github.com/dflemin3/turf.git"

[tool.setuptools]
include-package-data = true
package-data = {"turf.data" = ["*.nc", "*.csv"]}

[tool.setuptools.dynamic]
readme = {file = ["README.md"]}

[tool.pytest.ini_options]
minversion = "0.0"
python_files = ["tests/test_*.py"]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_also = ["def __repr__",
                "if __name__ == .__main__.:",
                "def pull_nfl_full_season_games_raw",
                "def pull_nhl_full_season_games_raw",
                "def save",
                "raise NotImplementedError",
                "def test*()"]
ignore_errors = true

[tool.coverage.html]
directory = "coverage_html_report"

[tool.ruff]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".data",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "__pycache__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    ".coverage",
    "turf.egg-info"]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
